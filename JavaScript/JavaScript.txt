--------JavaScript-------- 

JS -->  It is a Scripting language 
	Makes webpage Dynamic, Used to validate at the front end part
	Runs at client side (Browser)
	Case sensitivity

History :  
	NetScape (Browser) approched Brendon Eich in 1995 to develop a scripting language. 	
	Names : Mocha --> Live script --> JavaScript

	ECMA - "European Computers Manufacturers Association" Standard for scripting language
	ECMA Script --> ES1 1997
	Latest Version (ES13 2022)

	"Mozilla Developers Networks" maintains JS Documentation 

Advantages :
	1. Less Server interaction
	2. Better performance 
	3. Rich in interface
	4. More interactive

JS Engines --> 
	Chrome - V8
	firefox - SpiderMonkey
	Explorer - Chakra 
	Safari - JScore
	Opera - v8 - carakan
	
	V8 --> 
	* Multi threaded programme written in c++
	* Converts to Binary code
	
	Threads in V8 Engine :
	----------------------
	Fullcodegen => It consumes entire JS code and compiles just before execution
		      Just in time Complier
	
	Crankshaft => Monitors the code being compiled for hot segment.

	Main thread => Fetches the entire code -> Compiles it -> it will execute

	Compiler thread => Combination of fullcodegen and Crankshaft 

	Profiler thread => It monitors the entire code

	GC thread => Garbage collector thread

	Ways of adding JS to HTML page
	--------------------------------
	1. Inline JS => It will be applied for one particular element / tag.
	2. Internal JS => It will be applied for one page.
	3. External JS => It is for multiple page.

	Bag       --- Books
	Container --- data 

	Variable  --- Data
	Container --- data

	Var identifier(variable_name);
	Var Variable_name = value;

	Data Type : Defines the type of the data
	Rules : 1. Identifier must begin with a-z or A-Z or _ (UnderScore) or $ (Dollar)
		2. It can contain numbers (Alpha numeric)
		3. It is a case sensitive 

	Data Types :
	Primitive		Referenced/ Non primitive
	---------		-------------------------
	Number			Array
	String			Object
	Null			Date
	Boolean			Math
	Undefined 		Func

	String : Using " " , ' ' , ` `
	Null : Using the null keyword.
	Boolean : only True and false keyword.
	Undefined : Only declaration of variable.

	Array : Collection of data
		Data can be both Homogenous or hetergenous 

	Types of Array declartion : 
			    0,1,2,3
	1. Var arrayName = [1,2,3,4];
	
	2. Var arrayName = new Array(10,20,30,40);

	Object : Entity which has states and behaviour 
	
	Syntax : {
	key:value,
	key2:value2
	}
	Example : 	
	Employee --> Id	
		     Name
		     Designation
		     MgrID
		     Mobile
		     Adress
	
		{
		id:10,
		name:'AAA',
		designation:'software_Developer',
		Mobile:987456321,
		Address:'Banglore',
		mgrID:{
			id:10,
			name:'Rukesh',
			designation:'software_Developer',
			Mobile:965985321,
			Address:'Banglore'
		      }
		}

	Statement : Something that yeilds result

	Operands : 2 Types : 1) Variables		
			     2) Literals --> Direct values 
					     Numbers or String type of value
	Operators : which has specify functionality
   
	Operator types : 
	1) Arithmatic Operator 	    --> + - * / % ++ -- 
	2) Comparision / Relational --> == != > < >= <=  === !==
	3) Logical
	4) Ternary
	5) TypeOf

	Uses of console window : 1) We can log the message 
				 2) We can the check the erorrs 
				 3) We can run the JS code

	Pre increment 			Post increment 
 	Var a = 10;         		var b = 10;
	++a;				b++;

	Order of execution :
	Pre increment			Post increment
	1) Value incremented 		Substitute the Value 	
	2) Substitute the value 	Operation
	3) Operation			Value incremented

	Comparision Operator : 
	== != > < >= <=  === !==
	
	Output => Boolean

	Logical operator :  
	When we have to compare more than once then we will go with logical operators
	AND, OR, NOT

	Ternary operator : 
	Syntax : (Condition)? (condition)? trueStatement : falseStatement) : falseStatement

	TypeOf operator : 
	Which tells the type of the data 
	Number : Number
	String : String
	Null : Object 
	Undefined : Undefined 
	
	Array : Object
	Object : Object

	Template literals : Used for evaluated string.
			    Template literals works with only back ticks
	    
	Syntax : `My name is ${Var_name}`;

	Functions : Set of code which performs some dedicated task or functionality.
	Types of Function : 1) Named function 
			    2) Function expression / Annonymous function 
			    3) Immediately invoked function expression 
		 	    4) Fat arrow function 
	
	Named function 
			Syntax : function funName(arguments){
					//Statements
					
				  }
				  Fun_name();
	
	Function Expression 
			Syntax : var funExp = function(arguments){
					//statements 
				  }
				  funExp();
	
	Immediately invoked function expression  
			Syntax : (function(arguments){
				      //statements
				  }) 
				  ();

	Fat arrow function 
			Syntax : var fatArr = () => {
					//statements 
				  }
	Input Arguments : All primitive data types  and Array, objects, function and 
			  Multiple argumnets we can pass
	Return type : All primitive data types  and Array, objects, function and 
		      no multiple arguments but we can pass through Array or object

	Date : To operate the date
	       1) New Date() --> To get the current date 
	       2) New Date (Year, Month, day, hours, min, sec, milisec)
	       3) New Date (miliseconds)
	       4) New Date (Date String) "Month_name day, year time (HH:MM:SS)

	Date Inbuilt methods :
	--------------------
	getFullYear()    --> get the year as four digit number (YYYY)
	getMonth()       --> get the month as number (0-11)
	getDate()        --> get the day as a number(1-31)
	getHours()       --> get the hour (0-23)
	getMinutes()     --> get the minute (0-59)
	getSeconds()     --> get the second (0-59)
	getMiliSeconds() --> get the miliseconds (0-999)
	getDay()	 --> get the weekday as a number (0-6)
	Date.now()	 --> get the time ES5.

	Math object :
	math.pi		--> returns pi value
	math.round(X)	--> returns the value of X rounded to its nearest integer.
	math.pow(X,Y)	--> returns the value of X to the power of Y.
	math.sqrt(X) 	--> returns the square of X
	math.abs(X)	--> returns the absolute(positive) value of X	
	math.ceil(X) 	--> returns the value of X rounded up to its nearest integer.
	math.floor(X)	--> returns the value of X rounded down to its nearest integer.
	math.min() & math.max() --> returns the lowest and highest values.
	math.random() 	--> returns the random numbers between (0 to 1) Excluding 0 and 1.

	Control Statements : 
	------------------
	1) if : 
		Syntax : if(Condition){
			   //statements will execute when condition is true;
			  }

	2) else : 
		Syntax : if(Condition){
			   //statements will execute when condition is true;
			  }else{
			   //statements will execute when condition is false;
			  }
	3) else if : 
		Syntax : if(Condition1){
			   //statements will execute when condition is true;
			  }else if(Condition2){
			   //statements will execute when condition is true;
			  }else{
			   //statements will execute when condition is false;
			  }

	4) Switch : 
		Syntax : Switch(expression){
			 case a : //code block
			 break;
			 case b : //code block
			 break;
				
			 
			 default: //code block
			 }
	Loops : 
	-------
	While : 	
			Syntax : While(Condition){
			    	 //Code
				 }
	Do-While : 	
			Syntax :do{
				    //code
				  }
				    while(condition);
	for : 	
			Syntax : for(stat1;stat2;stat3){
				    //code	
			          }  
			stat1: initial phase 	var start=1;
			stat2: condition 	boolean condition 
			stat3: Counter/update	++,--

	for of : 		
			Syntax : for(variable of iterable){
					//code
				  }

	for in : 	
			Syntax : for (variable in object){
				//code
				}

	Break : Jumps out of the loop 	
	Continue : It will skip one loop.

	Variable Hoisting : It is a default behavior of moving only declarations to the top.
	
	Ex: Console.log(msg);
	    var msg = "Hi...";
	
	    after Hoisting 
	    var msg;
	    console.log(msg);
	    msg = "Hi...";

	Array :

	Property :
	-------- 
	Length : Returns the length of an array or We can append the new element to the Array.
			 Var array = [1,2,3,4,5];
			 console.log(array.length); --> Returns 5
			 
			 array.length = 6;
			 console.log(array.length); --> Returns 6
	
	Methods : 
	-------
	var arr =[1,2,3,4,2,5,6,7]

	var isArray = Array.isArray(arr) 
	console.log(isArray); --> Returns Boolean value whether the given input is Array or not
    
	includes(searchElement,fromIndex) 

    	var isIncluded = arr.includes(2);
     	console.log(isIncluded); --> true --> Determines whether an array includes a
										  certain element, returning true or false as appropriate.
    
   	 var isIncluded = arr.includes(2,6);
    	console.log(isIncluded); --> false

    	indexOf(searchElement,fromIndex)
    
    	var index = arr.indexOf(2)
    	console.log(index); --> 1 --> Returns the index of the first occurrence of a value in an array.

    	var index = arr.indexOf(2,2)
    	console.log(index); --> 4

	arr.push(6);
	console.log(arr); --> Appends new elements to an array at the end of an array, and returns the 
						  new length of the array..

	arr.pop();
	console.log(arr); --> Removes the last element from an array.

	arr.unshift(0);
	console.log(arr); --> Adds a new element to an array at the beginning.

	arr.shift();
	console.log(arr); --> Removes the first array element and "shifts" all other elements to a 
						  lower index.
			              Returns the string that shifted out.
	
	join( separator )
	var newA = arr.join('*') 
	console.log(newA); --> Joins all array elements into a string by the separator.
	
	splice(start index, delete count, items)
	var newSp = arr.splice(1,3); --> Removes elements from an array and, if necessary, inserts 
									 new elements in their place, returning the deleted elements
	console.log(newSp);
			
	slice( start index, end index)
	var newSl = arr.slice(1,4); --> Returns a section/Subset of an array.
	console.log(newSl);
	
	map((callback( value, index) ))
	
	filter(( callback( value, index) )) --> Returns the elements of an array that meet the 
											condition specified in a callback function.
	var newArray = array.filter((value) => {
        return((value % 2) === 0)
	})
	console.log(newArray);

	String : 
	
	Properties : 
	------------
	length : Returns the length of the string.
		var name = "Rukesh"
                console.log(name.length); --> Returns 6

	Methods : 
	---------
				var name = "Rukesh"
	toLowerCase() --> Converts all the alphabetic characters in a string to LOWERcase.
			  console.log(name.toLowerCase());

	toUpperCase() --> Converts all the alphabetic characters in a string to UPPERcase.
			  console.log(name.toUpperCase());

	charAt( position ) --> Returns the character at the specified index.
			  console.log(name.charAt(0));

	indexOf( searchString, position ) --> Returns the position of the first occurrence of a substring.	
					      console.log(name.indexOf("R"));

	concat(…strings) --> Returns a string that contains the concatenation of two or more strings.
			     console.log(name.concat(" Gowda"));

 	includes(search String, start position) --> Returns true if key is included in the range, and false otherwise.
						    console.log(name.includes("R"));

	replace(search Value, replaceValue) --> Replaces text in a string, using a regular expression or search string
						console.log(name.replace("R","S"));

	split( separator, limit) --> Split a string into substrings using the specified separator and return them as an array.
				     console.log(name.split("e"));

	substr( start, length) --> Gets a substring beginning at the specified location and having the specified length.
				   console.log(name.substr("R",3));

	search(value) --> Finds the first substring match in a regular expression search.
			  console.log(name.search("R"));
		 
	trim() --> Removes the leading and trailing white space and line terminator characters from a string.
		   console.log(name.trim("     Rukesh"));

	Browser Object Model(BOM) : The Browser Object Model (BOM) allows JavaScript to "talk to" the browser.

	Window Object :The Window interface represents a window containing a DOM document 

	Properties :
                    innerHeight --> window.innerHeight; the inner height of the browser window (in pixels)
					
	            innerWidth --> window.innerWidth; the inner width of the browser window (in pixels)
	
	Methods : window.prompt() --> A prompt box is often used if you want the user to input a value before entering a page. 
		  window.alert() --> An alert box is often used if you want to make sure information comes through to the user.
		  window.confirm() --> A confirm box is often used if you want the user to verify or accept something.
		  window.open() --> open a new window
		  window.close() --> close the current window
		  window.moveTo() --> move the current window
		  window.resizeTo() --> resize the current window 

	History object : history.back() --> same as clicking back in the browser
			 history.forward() --> same as clicking forward in the browser

	Location object : window.location.href --> returns the href (URL) of the current page
			  window.location.hostname -->  returns the domain name of the web host
			  window.location.pathname --> returns the path and filename of the current page
			  window.location.protocol --> returns the web protocol used (http: or https:)
			  window.location.assign() --> loads a new document

	Document object model(DOM): 
	The DOM represents a document with a logical tree.
	The Document Object Model (DOM) is a programming interface for HTML and XML documents, 
	which can be modified with a scripting language such as JavaScript.
	
	Methods : 
		
	Write() : Writes one or more HTML expressions to a document in the specified window.
		  document.write('Hello world');

	createElement(element/Tag name) : The name of an element. Creates an instance of the element for the specified tag. 
			  document.createElement("BUTTON");

	getElementById(id_name) : String that specifies the ID value. Case-insensitive. 
				  Returns a reference to the first object with the specified value of the ID or NAME attribute.
				  document.getElementById('demo');
	
	 getElementsByTagName(tag_name) : Retrieves a collection of objects based on the specified element name.
					  document.getElementsByTagName('p');

	getElementsByClassName(class_name) : Returns a HTMLCollection of the elements in the object on which the method was invoked 
					     (a document or an element) that have all the classes given by classNames.
      					     The classNames argument is interpreted as a space-separated list of classes.
					     document.getElementsByClassName('demo');

	querySelector(tag or id or class) : Returns the first element that is a descendant of node that matches selectors.
					    document.querySelector();

	querySelectorAll(tag or id or class) : Returns all element descendants of node that match selectors.
					       document.querySelectorAll();
		
	appendChild(element) : It will append the specified element name.

	
	JSON :  JavaScript Object Notation
	
	JSON is a lightweight data interchange format
	JSON is language independent *
	JSON is "self-describing" and easy to understand.

	{
	  "employees":[
	  {"firstName":"John", "lastName":"Doe"},
	  {"firstName":"Anna", "lastName":"Smith"},
	  {"firstName":"Peter", "lastName":"Jones"}
	]
	}

	JSON Data Types :
	In JSON, values must be one of the following data types
		a string, a number, an object, an array, a boolean, null
	JSON values cannot be one of the following data types:
		a function, a date, undefined

	JSON stringify() : The JSON.stringify() method converts JavaScript objects into strings.
			   When sending data to a web server the data has to be a string.

	Ex : 
	var obj = { "name":"John", "age":30, "city":"New York"};
	var myJSON = JSON.stringify(obj);
	document.getElementById("demo").innerHTML = myJSON;

	JSON parse() : The JSON.parse() method parses a string and returns a JavaScript object.
 		       The string has to be written in JSON format	
		       The JSON.parse() method can optionally transform the result with a function.
	Ex : 
	var obj = JSON.parse('{"firstName":"John", "lastName":"Doe"}');

	ES6 features : 
	
	var 
	 var declarations are globally scoped or function/locally scoped.
	 The scope is global when a var variable is declared outside a function. 
	 This means that any variable that is declared with var outside a function block is available for use in the whole window.
	 var is function scoped when it is declared within a function. 
	 This means that it is available and can be accessed only within that function.
	
	Let 
	 A block is a chunk of code bounded by {}. 
	 A block lives in curly braces. Anything within curly braces is a block.
	 So a variable declared in a block with let  is only available for use within that block.

	Const 
	 Variables declared with the const maintain constant values. const declarations share some similarities with let declarations.
	 const declarations are block scoped
	 Like let declarations, const declarations can only be accessed within the block they were declared.
	 const cannot be updated or re-declared
	 This means that the value of a variable declared with const remains the same within its scope. 
	 It cannot be updated or re-declared.

	Object and Array De-structuring.	
	The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, 
	or properties from objects, into distinct variables.
	
	let a, b, rest;
	[a, b] = [10, 20];

	console.log(a);
	// expected output: 10

	console.log(b);
	// expected output: 20

	[a, b, ...rest] = [10, 20, 30, 40, 50];

	console.log(rest);
	// expected output: Array [30,40,50]
	
	Object de-structuring
	const user = {
    	id: 42,
    	is_verified: true
	};

	const {id, is_verified} = user;

	console.log(id); // 42
	console.log(is_verified); // true
	
Functions that can be assigned to a variable, passed into another function, or returned from another function just like any other normal value, are called first class functions. In JavaScript, all functions are first class functions.

The functions that take a function as an argument, or return a function as a return value, are called higher order functions.

When functions are passed in to or returned from another function, then those functions which were passed in or returned can be called a lambda.


	
