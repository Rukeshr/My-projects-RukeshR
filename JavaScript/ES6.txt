
Scopes of the var, let and const Keywords : 

KEYWORD	SCOPE	                  REDECLARATION & REASSIGNMENT	HOISTING
var	    Global, Local	          yes & yes	                    yes, with default value
let   	Global, Local,  Block	  no & yes	                    yes, without default value
const	  Global, Local,  Block	  no & no	                      yes, without default value

Arrow Functions : anonymous functions
const myFunc = () => {
  const myVar = "value";
  return myVar;
}

Arrow Functions with Parameters : Just like a regular function, you can pass arguments into an arrow function

ex : const doubler = (item) => item * 2;
doubler(4); 

If an arrow function has a single parameter, the parentheses enclosing the parameter may be omitted.
ex : const doubler = item => item * 2;

Rest Parameter with Function Parameters :  With the rest parameter, you can create functions that take a variable number of arguments. These arguments are stored in an array that can be accessed later from inside the function.

A Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future.

A Promise is in one of these states:

pending: initial state, neither fulfilled nor rejected.
fulfilled: meaning that the operation was completed successfully.
rejected: meaning that the operation failed.
