
Scopes of the var, let and const Keywords : 

KEYWORD	SCOPE	                  REDECLARATION & REASSIGNMENT	HOISTING
var	    Global, Local	          yes & yes	                    yes, with default value
let   	Global, Local,  Block	  no & yes	                    yes, without default value
const	  Global, Local,  Block	  no & no	                      yes, without default value

Arrow Functions : anonymous functions
const myFunc = () => {
  const myVar = "value";
  return myVar;
}

Arrow Functions with Parameters : Just like a regular function, you can pass arguments into an arrow function

ex : const doubler = (item) => item * 2;
doubler(4); 

If an arrow function has a single parameter, the parentheses enclosing the parameter may be omitted.
ex : const doubler = item => item * 2;

Rest Parameter with Function Parameters :  With the rest parameter, you can create functions that take a variable number of arguments. These arguments are stored in an array that can be accessed later from inside the function.

A Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future.

A Promise is in one of these states:

pending: initial state, neither fulfilled nor rejected.
fulfilled: meaning that the operation was completed successfully.
rejected: meaning that the operation failed.

Regular expression : Are used to create match parts of string. test() method takes the regex, applies it to a string (which is placed inside the parentheses), and returns true or false if your pattern finds something or not.
ex : let testStr = "freeCodeCamp";
let testRegex = /Code/; // Case Sensitive
testRegex.test(testStr);

 search for multiple patterns using the alternation or OR operator: |

Ignore Case While Matching : /regex/i; i is the ignore case

extract the actual matches you found with the .match() method.

To search or extract a pattern more than once, you can use the global search flag: g.

let repeatRegex = /Repeat/g;
testStr.match(repeatRegex);

You can have multiple flags on your regex like /search/gi 

Match Anything with Wildcard Period : 
ex : let hugStr = "Bear hug";
let huRegex = /hu./;
huRegex.test(hugStr);

Returns true / false

Match Single Character with Multiple Possibilities
let bogStr = "bog";
let bgRegex = /b[aiu]g/;
bogStr.match(bgRegex);

Match Letters of the Alphabet : you can define a range of characters to match using a hyphen character: -.
let matStr = "mat";
let bgRegex = /[a-e]at/;
matStr.match(bgRegex);

Match Numbers and Letters of the Alphabet : hyphen (-) to match a range of characters is not limited to letters. It also works to match a range of numbers.

ex : let jennyStr = "Jenny8675309";
let myRegex = /[a-z0-9]/ig;
jennyStr.match(myRegex);

Match Single Characters Not Specified : you could also create a set of characters that you do not want to match. These types of character sets are called negated character sets. To create a negated character set, you place a caret character (^) after the opening bracket and before the characters you do not want to match.

ex : let quoteSample = "3 blind mice.";
let myRegex = /change/;
let result = myRegex; 

Match Characters that Occur One or More Times : you need to match a character (or group of characters) that appears one or more times in a row. This means it occurs at least once, and may be repeated. You can use the + character to check if that is the case. 

ex : let difficultSpelling = "ssgssgss";
let myRegex = /s+/g;
let result = difficultSpelling.match(myRegex);

Match Characters that Occur Zero or More Times : There's also an option that matches characters that occur zero or more times. The character to do this is the asterisk or star: *

let soccerWord = "gooooooooal!";
let goRegex = /go*/;
soccerWord.match(goRegex);


